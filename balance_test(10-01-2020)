variables
{
	player:
		0: orisaTempArmorPool
		1: orisaBoolActiveFortify
		2: orisaBarrierCD
		3: roadhogTaBreatherBoostBool
		4: roadhogTaBreatherBoostFor
		5: roadhogTaBreatherVerif
		6: winstonJumpPackBool
		7: winstonJumpPackDamagedHeroes
		8: winstonForDamageJump
}

rule("D.VA Max health and projectile speed")
{
	event
	{
		Ongoing - Each Player;
		All;
		D.Va;
	}

	actions
	{
		Set Max Health(Event Player, 1);
		Add Health Pool To Player(Event Player, Armor, 294, True, True);
		Set Projectile Speed(Event Player, 150);
		Set Ability Cooldown(Event Player, Button(Secondary Fire), 0);
	}
}

rule("D.Va Defense Matrix (0.5s CD)")
{
	event
	{
		Ongoing - Each Player;
		All;
		D.Va;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(D.Va);
		Is Firing Secondary(Event Player) == True;
	}

	actions
	{
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
		Wait(0.500, Ignore Condition);
		Set Ability Cooldown(Event Player, Button(Secondary Fire), 0);
	}
}

rule("D.Va (1/3 movement penalty (Shooting))")
{
	event
	{
		Ongoing - Each Player;
		All;
		D.Va;
	}

	conditions
	{
		Is Firing Primary(Event Player) == True;
		!Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Set Move Speed(Event Player, 111.667);
	}
}

disabled rule("D.Va (1/4 movement penalty (Shooting))")
{
	event
	{
		Ongoing - Each Player;
		All;
		D.Va;
	}

	conditions
	{
		Is Firing Primary(Event Player) == True;
		!Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		disabled Set Move Speed(Event Player, 125);
	}
}

rule("D.Va (movement penalty (stop shooting))")
{
	event
	{
		Ongoing - Each Player;
		All;
		D.Va;
	}

	conditions
	{
		!Is Firing Primary(Event Player) == True;
		!Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Set Move Speed(Event Player, 100);
	}
}

rule("D.Va Booster")
{
	event
	{
		Ongoing - Each Player;
		All;
		D.Va;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(D.Va);
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		If(Is Using Ability 1(Event Player) == True);
			Set Move Speed(Event Player, 150);
		Else;
			Set Move Speed(Event Player, 100);
		End;
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Orisa max health")
{
	event
	{
		Ongoing - Each Player;
		All;
		Orisa;
	}

	actions
	{
		Set Max Health(Event Player, 66.667);
	}
}

rule("Orisa fortify buff (+25% speed, +100 armor)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Orisa;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Event Player.orisaBoolActiveFortify = True;
		Add Health Pool To Player(Event Player, Armor, 100, False, True);
		Event Player.orisaTempArmorPool = Last Created Health Pool;
		Set Move Speed(Event Player, 125);
		Wait(4, Ignore Condition);
		Set Move Speed(Event Player, 100);
		Remove Health Pool From Player(Event Player.orisaTempArmorPool);
		Event Player.orisaBoolActiveFortify = False;
	}
}

rule("Orisa Fortify Buff (Shooting = Ignore speed penalty)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Orisa;
	}

	conditions
	{
		Event Player.orisaBoolActiveFortify == True;
	}

	actions
	{
		If(Is Firing Primary(Event Player) == True);
			Set Move Speed(Event Player, 178.572);
		Else;
			Set Move Speed(Event Player, 125);
		End;
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Orisa Buff Barrier (Avaibility)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Orisa;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Orisa);
	}

	actions
	{
		If(Event Player.orisaBarrierCD < 9);
			Set Ability Cooldown(Event Player, Button(Ability 2), 9 - Event Player.orisaBarrierCD);
		Else;
			Set Ability Cooldown(Event Player, Button(Ability 2), 0);
		End;
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Orisa CD decrement")
{
	event
	{
		Ongoing - Each Player;
		All;
		Orisa;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		Set Ability 2 Enabled(Event Player, False);
		Wait(1, Ignore Condition);
		Event Player.orisaBarrierCD = Event Player.orisaBarrierCD - 9;
		Set Ability 2 Enabled(Event Player, True);
	}
}

rule("Orisa CD increment")
{
	event
	{
		Ongoing - Each Player;
		All;
		Orisa;
	}

	actions
	{
		Chase Player Variable At Rate(Event Player, orisaBarrierCD, 18, 1, Destination and Rate);
	}
}

rule("Spawn Orisa")
{
	event
	{
		Ongoing - Each Player;
		All;
		Orisa;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Event Player.orisaBarrierCD = 18;
	}
}

rule("Reinhardt (75hp damage/ swing)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Reinhardt;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Reinhardt);
	}

	actions
	{
		If(Is Firing Primary(Event Player) == True);
			Set Damage Dealt(Event Player, 88.235);
		Else;
			Set Damage Dealt(Event Player, 100);
		End;
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Roadhog (400 hp. Tank a Breather 200HP)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Roadhog;
	}

	actions
	{
		Set Healing Dealt(Event Player, 66.667);
		Set Max Health(Event Player, 66.667);
	}
}

rule("Roadhog Take Deeply a Breather (Activate second take a breather)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Roadhog;
	}

	conditions
	{
		"Roadhog uses a second breather. He became stronger during a short period of time. He can't be stun, sleep, freeze or knockdown or rooted. And he healed 200HP in 1 second again."
		disabled Is Using Ability 2(Event Player) == True;
		Is Button Held(Event Player, Button(Ability 2)) == True;
	}

	actions
	{
		If(Is Button Held(Event Player, Button(Ability 2)));
			Event Player.roadhogTaBreatherVerif = Event Player.roadhogTaBreatherVerif + 0.250;
		End;
		If(Event Player.roadhogTaBreatherVerif == 1.500);
			Play Effect(All Players(All Teams), Good Explosion, Color(Aqua), Event Player, 100);
			Set Status(Event Player, Null, Rooted, 1);
			Set Primary Fire Enabled(Event Player, False);
			Set Secondary Fire Enabled(Event Player, False);
			Set Ability 1 Enabled(Event Player, False);
			Set Ability 2 Enabled(Event Player, False);
			Set Ultimate Ability Enabled(Event Player, False);
			Wait(1, Ignore Condition);
			Event Player.roadhogTaBreatherBoostBool = True;
			Event Player.roadhogTaBreatherVerif = 0;
			Set Primary Fire Enabled(Event Player, True);
			Set Secondary Fire Enabled(Event Player, True);
			Set Ability 1 Enabled(Event Player, True);
			Set Ability 2 Enabled(Event Player, True);
			Set Ultimate Ability Enabled(Event Player, True);
		End;
		Wait(0.250, Abort When False);
		Loop If Condition Is True;
	}
}

rule("Roadhog Take a Breather Buff (Damage reduction longer)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Roadhog;
	}

	conditions
	{
		Event Player.roadhogTaBreatherBoostBool == True;
	}

	actions
	{
		Set Damage Received(Event Player, 50);
		Start Heal Over Time(Event Player, Event Player, 1, 200);
		For Player Variable(Event Player, roadhogTaBreatherBoostFor, 0, 5, 0.050);
			Clear Status(Event Player, Asleep);
			Clear Status(Event Player, Frozen);
			Clear Status(Event Player, Rooted);
			Clear Status(Event Player, Stunned);
			Clear Status(Event Player, Knocked Down);
			Play Effect(All Players(All Teams), Good Explosion, Color(Red), Event Player, 2);
			Wait(0.050, Ignore Condition);
		End;
		Set Damage Received(Event Player, 100);
		Event Player.roadhogTaBreatherBoostBool = False;
		Set Ability Cooldown(Event Player, Button(Ability 2), 10);
	}
}

rule("¤¤¤¤ Do Can Crusher (Take a Breather buff)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Roadhog;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
	}

	actions
	{
		Communicate(Event Player, Emote Right);
	}
}

rule("¤¤¤¤ RoadCrush Take a breather Buff (Emote Version use)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Roadhog;
	}

	conditions
	{
		Is Communicating Any Emote(Event Player) == True;
	}

	actions
	{
		Set Ability Cooldown(Event Player, Button(Ability 2), 15);
		Wait(0.500, Abort When False);
		Start Heal Over Time(Event Player, Event Player, 1, 200);
		Set Damage Received(Event Player, 50);
		Wait(4.500, Abort When False);
		Set Damage Received(Event Player, 100);
		For Player Variable(Event Player, roadhogTaBreatherBoostFor, 0, 5, 0.050);
			Clear Status(Event Player, Asleep);
			Clear Status(Event Player, Frozen);
			Clear Status(Event Player, Rooted);
			Clear Status(Event Player, Stunned);
			Clear Status(Event Player, Knocked Down);
			Play Effect(All Players(All Teams), Good Explosion, Color(Red), Event Player, 2);
			Wait(0.050, Ignore Condition);
		End;
	}
}

rule("Sigma Hypersphere")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sigma;
	}

	conditions
	{
		"Maximum range reduced from 22m to 15m"
		Hero Of(Event Player) == Hero(Sigma);
	}
}

rule("Winston (Health/armor + shield)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Winston;
	}

	actions
	{
		Set Max Health(Event Player, 71.429);
		Reset Player Hero Availability(Event Player);
		Add Health Pool To Player(Event Player, Armor, 28.571, True, True);
		Add Health Pool To Player(Event Player, Health, 114.285, True, True);
	}
}

rule("Winston (Jump pack landing +25 damage)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Winston;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Wait(0.100, Abort When False);
		Event Player.winstonJumpPackBool = True;
	}
}

rule("Winston (Landing)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Winston;
	}

	conditions
	{
		!Is In Air(Event Player) == True;
		Event Player.winstonJumpPackBool == True;
	}

	actions
	{
		Event Player.winstonJumpPackDamagedHeroes = Players Within Radius(Event Player, 5, Opposite Team Of(Team Of(Event Player)),
			Surfaces And All Barriers);
		For Player Variable(Event Player, winstonForDamageJump, 0, Count Of(Event Player.winstonJumpPackDamagedHeroes), 1);
			Damage(Event Player.winstonJumpPackDamagedHeroes[Event Player.winstonForDamageJump], Event Player, 25 * (1 - Distance Between(
				Event Player, Event Player.winstonJumpPackDamagedHeroes[Event Player.winstonForDamageJump]) / 5));
		End;
		Event Player.winstonJumpPackBool = False;
	}
}
