variables
{
	global:
		0: heroAvailableArray
		1: roadHogTaBreatherDuration
		2: projectedBarrierCD
		3: particuleBarrierCD

	player:
		0: orisaTempArmorPool
		1: orisaBoolActiveFortify
		2: orisaBarrierCD
		3: roadhogTaBreatherBoostBool
		4: roadhogTaBreatherBoostFor
		5: roadhogTaBreatherVerif
		6: winstonJumpPackBool
		7: winstonJumpPackDamagedHeroes
		8: winstonForDamageJump
		9: zaryaEnergy
		10: switchVerif
		11: particuleBarrierHealth
		12: particuleBarrierHealthID
		13: particuleBarrierEffectID
		14: projectedBarrierTarget
		15: projectedBarrierHealth
		16: projectedBarrierHealthID
		17: projectedBarrierEffectID
		18: projectedBarrierIsAffectedBy
		19: projectedBarrierGenerator
		20: zaryaEnergyHUD
		21: projectedBarrierLoopVar
		22: projectedBarrierCD
		23: particuleBarrierCD
		24: zaryaProjectedBarrierHUD
		25: zaryaParticuleBarrierHUD
		26: projectedBarrierActivated
		27: particuleBarrierActivated
}

rule("GLOBAL")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.roadHogTaBreatherDuration = 5;
		Global.projectedBarrierCD = 6;
		Global.particuleBarrierCD = 8;
	}
}

rule("HERO AVAIBILITY (Remove Echo)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		Global.heroAvailableArray = All Heroes;
		Global.heroAvailableArray = Remove From Array(Global.heroAvailableArray, Hero(Echo));
		Set Player Allowed Heroes(Event Player, Global.heroAvailableArray);
	}
}

rule("SWITCHING")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		Event Player.switchVerif = Hero Of(Event Player);
		Wait(0.016, Ignore Condition);
		Skip If(Hero Of(Event Player) == Event Player.switchVerif, 2);
		Remove All Health Pools From Player(Event Player);
		Set Max Health(Event Player, 100);
		If(Hero Of(Event Player) == Hero(Zarya));
			Set Melee Enabled(Event Player, False);
			Set Ability 1 Enabled(Event Player, False);
			Set Ability 2 Enabled(Event Player, False);
		Else;
			Set Melee Enabled(Event Player, True);
			Set Ability 1 Enabled(Event Player, True);
			Set Ability 2 Enabled(Event Player, True);
			Destroy HUD Text(Event Player.zaryaEnergyHUD);
			Destroy HUD Text(Event Player.zaryaProjectedBarrierHUD);
			Destroy HUD Text(Event Player.zaryaParticuleBarrierHUD);
		End;
		Loop;
	}
}

rule("D.Va (Ult verification)")
{
	event
	{
		Ongoing - Each Player;
		All;
		D.Va;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Wait(1, Ignore Condition);
		If(Health(Event Player) < 5);
			Remove All Health Pools From Player(Event Player);
			Add Health Pool To Player(Event Player, Health, 148.500, True, True);
		Else;
			Remove All Health Pools From Player(Event Player);
			Add Health Pool To Player(Event Player, Armor, 294, True, True);
		End;
	}
}

rule("D.Va (Mech destroy)")
{
	event
	{
		Ongoing - Each Player;
		All;
		D.Va;
	}

	conditions
	{
		Health(Event Player) < 0.100;
	}

	actions
	{
		If(Max Health(Event Player) > 5);
			Remove All Health Pools From Player(Event Player);
			Add Health Pool To Player(Event Player, Health, 148.500, True, True);
		Else;
			Remove All Health Pools From Player(Event Player);
			Add Health Pool To Player(Event Player, Armor, 294, True, True);
		End;
	}
}

rule("D.VA Max health and projectile speed")
{
	event
	{
		Ongoing - Each Player;
		All;
		D.Va;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Wait(0.100, Ignore Condition);
		Set Max Health(Event Player, 1);
		Set Projectile Speed(Event Player, 150);
		Remove All Health Pools From Player(Event Player);
		If(Max Health(Event Player) > 5);
			Add Health Pool To Player(Event Player, Armor, 294, True, True);
		Else;
			Add Health Pool To Player(Event Player, Armor, 148.500, True, True);
		End;
	}
}

rule("D.Va Defense Matrix (0.5s CD)")
{
	event
	{
		Ongoing - Each Player;
		All;
		D.Va;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(D.Va);
		Is Firing Secondary(Event Player) == True;
	}

	actions
	{
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
		Wait(0.500, Ignore Condition);
		Set Ability Cooldown(Event Player, Button(Secondary Fire), 0);
	}
}

rule("D.Va (1/3 movement penalty (Shooting))")
{
	event
	{
		Ongoing - Each Player;
		All;
		D.Va;
	}

	conditions
	{
		Is Firing Primary(Event Player) == True;
		!Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Set Move Speed(Event Player, 111.667);
	}
}

disabled rule("D.Va (1/4 movement penalty (Shooting))")
{
	event
	{
		Ongoing - Each Player;
		All;
		D.Va;
	}

	conditions
	{
		Is Firing Primary(Event Player) == True;
		!Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		disabled Set Move Speed(Event Player, 125);
	}
}

rule("D.Va (movement penalty (stop shooting))")
{
	event
	{
		Ongoing - Each Player;
		All;
		D.Va;
	}

	conditions
	{
		!Is Firing Primary(Event Player) == True;
		!Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Set Move Speed(Event Player, 100);
	}
}

rule("D.Va Booster")
{
	event
	{
		Ongoing - Each Player;
		All;
		D.Va;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(D.Va);
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		If(Is Using Ability 1(Event Player) == True);
			Set Move Speed(Event Player, 150);
		Else;
			Set Move Speed(Event Player, 100);
		End;
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Orisa max health")
{
	event
	{
		Ongoing - Each Player;
		All;
		Orisa;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Wait(0.100, Ignore Condition);
		Set Max Health(Event Player, 66.667);
	}
}

rule("Orisa fortify buff (+25% speed, +100 armor)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Orisa;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Event Player.orisaBoolActiveFortify = True;
		Add Health Pool To Player(Event Player, Armor, 100, False, True);
		Event Player.orisaTempArmorPool = Last Created Health Pool;
		Set Move Speed(Event Player, 125);
		Wait(4, Ignore Condition);
		Set Move Speed(Event Player, 100);
		Remove Health Pool From Player(Event Player.orisaTempArmorPool);
		Event Player.orisaBoolActiveFortify = False;
	}
}

rule("Orisa Fortify Buff (Shooting = Ignore speed penalty)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Orisa;
	}

	conditions
	{
		Event Player.orisaBoolActiveFortify == True;
	}

	actions
	{
		If(Is Firing Primary(Event Player) == True);
			Set Move Speed(Event Player, 178.572);
		Else;
			Set Move Speed(Event Player, 125);
		End;
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Orisa Buff Barrier (Avaibility)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Orisa;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Orisa);
	}

	actions
	{
		If(Event Player.orisaBarrierCD < 9);
			Set Ability Cooldown(Event Player, Button(Ability 2), 9 - Event Player.orisaBarrierCD);
		Else;
			Set Ability Cooldown(Event Player, Button(Ability 2), 0);
		End;
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Orisa CD decrement")
{
	event
	{
		Ongoing - Each Player;
		All;
		Orisa;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		Set Ability 2 Enabled(Event Player, False);
		Wait(1, Ignore Condition);
		Event Player.orisaBarrierCD = Event Player.orisaBarrierCD - 9;
		Set Ability 2 Enabled(Event Player, True);
	}
}

rule("Orisa CD increment")
{
	event
	{
		Ongoing - Each Player;
		All;
		Orisa;
	}

	actions
	{
		Chase Player Variable At Rate(Event Player, orisaBarrierCD, 18, 1, Destination and Rate);
	}
}

rule("Spawn Orisa")
{
	event
	{
		Ongoing - Each Player;
		All;
		Orisa;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Event Player.orisaBarrierCD = 18;
	}
}

rule("Reinhardt (75hp damage/ swing)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Reinhardt;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Reinhardt);
	}

	actions
	{
		If(Is Firing Primary(Event Player) == True);
			Set Damage Dealt(Event Player, 88.235);
		Else;
			Set Damage Dealt(Event Player, 100);
		End;
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Roadhog (CD Take a breather)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Roadhog;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		Wait(2, Ignore Condition);
		Set Ability Cooldown(Event Player, Button(Ability 2), 10);
	}
}

rule("Roadhog (400 hp. Tank a Breather 200HP)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Roadhog;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Wait(0.100, Ignore Condition);
		Set Healing Dealt(Event Player, 66.667);
		Set Max Health(Event Player, 66.667);
	}
}

rule("Roadhog Take Deeply a Breather (Activate second take a breather)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Roadhog;
	}

	conditions
	{
		"Roadhog uses a second breather. He became stronger during a short period of time. He can't be stun, sleep, freeze or knockdown or rooted. And he healed 200HP in 1 second again."
		disabled Is Using Ability 2(Event Player) == True;
		Is Button Held(Event Player, Button(Ability 2)) == True;
	}

	actions
	{
		If(Is Button Held(Event Player, Button(Ability 2)));
			Event Player.roadhogTaBreatherVerif = Event Player.roadhogTaBreatherVerif + 0.250;
		End;
		If(Event Player.roadhogTaBreatherVerif == 1.500);
			Play Effect(All Players(All Teams), Good Explosion, Color(Aqua), Event Player, 100);
			Set Status(Event Player, Null, Rooted, 1);
			Set Primary Fire Enabled(Event Player, False);
			Set Secondary Fire Enabled(Event Player, False);
			Set Ability 1 Enabled(Event Player, False);
			Set Ability 2 Enabled(Event Player, False);
			Set Ultimate Ability Enabled(Event Player, False);
			Wait(1, Ignore Condition);
			Event Player.roadhogTaBreatherBoostBool = True;
			Event Player.roadhogTaBreatherVerif = 0;
			Set Primary Fire Enabled(Event Player, True);
			Set Secondary Fire Enabled(Event Player, True);
			Set Ability 1 Enabled(Event Player, True);
			Set Ability 2 Enabled(Event Player, True);
			Set Ultimate Ability Enabled(Event Player, True);
		End;
		Wait(0.250, Abort When False);
		Loop If Condition Is True;
	}
}

rule("Roadhog Take a Breather Buff (Damage reduction longer)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Roadhog;
	}

	conditions
	{
		Event Player.roadhogTaBreatherBoostBool == True;
	}

	actions
	{
		Start Heal Over Time(Event Player, Event Player, 1, 200);
		For Player Variable(Event Player, roadhogTaBreatherBoostFor, 0, Global.roadHogTaBreatherDuration, 1);
			Play Effect(All Players(All Teams), Good Explosion, Color(Red), Event Player, 10);
			Wait(1, Ignore Condition);
		End;
		Event Player.roadhogTaBreatherBoostBool = False;
		Set Ability Cooldown(Event Player, Button(Ability 2), 10);
	}
}

rule("Roadhog Stun cleanse")
{
	event
	{
		Ongoing - Each Player;
		All;
		Roadhog;
	}

	conditions
	{
		Event Player.roadhogTaBreatherBoostBool == True;
		(Has Status(Event Player, Asleep) || Has Status(Event Player, Knocked Down) || Has Status(Event Player, Frozen) || Has Status(
			Event Player, Rooted) || Has Status(Event Player, Stunned)) == True;
	}

	actions
	{
		Clear Status(Event Player, Asleep);
		Clear Status(Event Player, Frozen);
		Clear Status(Event Player, Rooted);
		Clear Status(Event Player, Stunned);
		Clear Status(Event Player, Knocked Down);
	}
}

disabled rule("¤¤¤¤ Do Can Crusher (Take a Breather buff)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Roadhog;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
	}

	actions
	{
		Communicate(Event Player, Emote Right);
	}
}

disabled rule("¤¤¤¤ RoadCrush Take a breather Buff (Emote Version use)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Roadhog;
	}

	conditions
	{
		Is Communicating Any Emote(Event Player) == True;
	}

	actions
	{
		Set Ability Cooldown(Event Player, Button(Ability 2), 15);
		Wait(0.500, Abort When False);
		Start Heal Over Time(Event Player, Event Player, 1, 200);
		Set Damage Received(Event Player, 50);
		Wait(4.500, Abort When False);
		Set Damage Received(Event Player, 100);
		For Player Variable(Event Player, roadhogTaBreatherBoostFor, 0, 5, 0.050);
			Clear Status(Event Player, Asleep);
			Clear Status(Event Player, Frozen);
			Clear Status(Event Player, Rooted);
			Clear Status(Event Player, Stunned);
			Clear Status(Event Player, Knocked Down);
			Play Effect(All Players(All Teams), Good Explosion, Color(Red), Event Player, 2);
			Wait(0.050, Ignore Condition);
		End;
	}
}

rule("Sigma Hypersphere")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sigma;
	}

	conditions
	{
		"Maximum range reduced from 22m to 15m"
		Hero Of(Event Player) == Hero(Sigma);
	}
}

rule("Winston (Health/armor + shield)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Winston;
	}

	actions
	{
		Set Max Health(Event Player, 71.429);
		Reset Player Hero Availability(Event Player);
		Add Health Pool To Player(Event Player, Armor, 28.571, True, True);
		Add Health Pool To Player(Event Player, Health, 114.285, True, True);
	}
}

rule("Winston (Jump pack landing +25 damage)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Winston;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Wait(0.100, Abort When False);
		Event Player.winstonJumpPackBool = True;
	}
}

rule("Winston (Landing)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Winston;
	}

	conditions
	{
		!Is In Air(Event Player) == True;
		Event Player.winstonJumpPackBool == True;
	}

	actions
	{
		Event Player.winstonJumpPackDamagedHeroes = Players Within Radius(Event Player, 5, Opposite Team Of(Team Of(Event Player)),
			Surfaces And All Barriers);
		For Player Variable(Event Player, winstonForDamageJump, 0, Count Of(Event Player.winstonJumpPackDamagedHeroes), 1);
			Damage(Event Player.winstonJumpPackDamagedHeroes[Event Player.winstonForDamageJump], Event Player, 25 * (1 - Distance Between(
				Event Player, Event Player.winstonJumpPackDamagedHeroes[Event Player.winstonForDamageJump]) / 5));
		End;
		Event Player.winstonJumpPackBool = False;
	}
}

rule("Winston (Jump 5s CD, verif ult)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Winston;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == False;
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Set Ability Cooldown(Event Player, Button(Ability 1), 5);
	}
}

rule("Zarya (Energy damage boost)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zarya;
	}

	actions
	{
		If(Is Button Held(Event Player, Button(Melee)) == True);
			Set Damage Dealt(Event Player, 100);
			Set Melee Enabled(Event Player, True);
			Press Button(Event Player, Button(Melee));
			Wait(0.250, Ignore Condition);
			Set Melee Enabled(Event Player, False);
		End;
		Set Damage Dealt(Event Player, 100 + Event Player.zaryaEnergy);
		Wait(0.016, Ignore Condition);
		Loop;
	}
}

rule("Zarya (Energy loss : -1% per ammo shot)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zarya;
	}

	conditions
	{
		(Is Firing Primary(Event Player) == True || Is Firing Secondary(Event Player) == True) == True;
	}

	actions
	{
		If(Event Player.zaryaEnergy > 0 && Is Firing Primary(Event Player) == True);
			Event Player.zaryaEnergy = Event Player.zaryaEnergy - 0.960;
			If(Event Player.zaryaEnergy < 0);
				Event Player.zaryaEnergy = 0;
			End;
			Wait(0.048, Ignore Condition);
		End;
		If(Event Player.zaryaEnergy > 0 && Is Firing Secondary(Event Player) == True);
			Event Player.zaryaEnergy = Event Player.zaryaEnergy - 25;
			If(Event Player.zaryaEnergy < 0);
				Event Player.zaryaEnergy = 0;
			End;
			Wait(1, Ignore Condition);
		End;
		Loop If Condition Is True;
	}
}

rule("Zarya HUD")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zarya;
	}

	actions
	{
		Create HUD Text(All Players(All Teams), String("{0} {1}", Ability Icon String(Hero(Zarya), Button(Ability 2)), Round To Integer(
			Global.projectedBarrierCD - Event Player.projectedBarrierCD, Down)), Null, Null, Left, 0, Color(Aqua), Color(White), Color(
			White), Visible To and String, Default Visibility);
		Event Player.zaryaProjectedBarrierHUD = Last Text ID;
		Create HUD Text(All Players(All Teams), String("{0} {1}", Ability Icon String(Hero(Zarya), Button(Ability 1)), Round To Integer(
			Global.particuleBarrierCD - Event Player.particuleBarrierCD, Down)), Null, Null, Left, 0, Color(Aqua), Color(White), Color(
			White), Visible To and String, Default Visibility);
		Event Player.zaryaParticuleBarrierHUD = Last Text ID;
		Create HUD Text(All Players(All Teams), String("{0} {1}", Icon String(Diamond), Round To Integer(Event Player.zaryaEnergy, Down)),
			Null, Null, Left, 0, Color(Aqua), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.zaryaEnergyHUD = Last Text ID;
	}
}

rule("Zarya Spawn")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zarya;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Set Max Health(Event Player, 50);
		Add Health Pool To Player(Event Player, Health, 100, True, True);
		Event Player.zaryaEnergy = 0;
		Event Player.projectedBarrierCD = Global.projectedBarrierCD;
		Event Player.particuleBarrierCD = Global.particuleBarrierCD;
	}
}

rule("¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤ Zarya Particule Barrier Activation ¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zarya;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 1)) == True;
		Event Player.particuleBarrierCD == Global.particuleBarrierCD;
	}

	actions
	{
		Event Player.particuleBarrierActivated = True;
		Stop Chasing Player Variable(Event Player, particuleBarrierCD);
		Event Player.particuleBarrierCD = 0;
		Add Health Pool To Player(Event Player, Shields, 200, False, True);
		Event Player.particuleBarrierHealthID = Last Created Health Pool;
		Event Player.particuleBarrierHealth = 200;
		Create Effect(All Players(All Teams), Sphere, Color(White), Event Player, 1, Visible To Position and Radius);
		Event Player.projectedBarrierEffectID = Last Created Entity;
		Wait(2, Ignore Condition);
		Event Player.particuleBarrierActivated = False;
		Remove Health Pool From Player(Event Player.particuleBarrierHealthID);
		Event Player.particuleBarrierHealth = 0;
	}
}

rule("Zarya Particule Barrier (Death Immunity + Animation)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zarya;
	}

	actions
	{
		If(Event Player.particuleBarrierHealth > 0);
			Set Status(Event Player, Null, Unkillable, 9999);
			Event Player.particuleBarrierEffectID = Last Created Entity;
		Else;
			Clear Status(Event Player, Unkillable);
			Event Player.particuleBarrierHealthID = False;
			Destroy Effect(Event Player.particuleBarrierEffectID);
		End;
		Wait(0.016, Ignore Condition);
		Loop;
	}
}

rule("Zarya Particule Barrier (CC immunity)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.particuleBarrierHealth > 0;
		(Has Status(Event Player, Burning) || Has Status(Event Player, Frozen) || Has Status(Event Player, Stunned)) == True;
	}

	actions
	{
		Clear Status(Event Player, Burning);
		Clear Status(Event Player, Frozen);
		Clear Status(Event Player, Stunned);
	}
}

rule("Zarya Particule Barrier (Damage absorption)")
{
	event
	{
		Player Took Damage;
		All;
		All;
	}

	conditions
	{
		Event Player.particuleBarrierHealth > 0;
	}

	actions
	{
		If(Event Damage > Event Player.particuleBarrierHealth);
			Event Player.zaryaEnergy = Event Player.zaryaEnergy + Event Player.particuleBarrierHealth / 5;
			Heal(Event Player, Null, Event Damage - Event Player.particuleBarrierHealth);
			Event Player.particuleBarrierHealth = 0;
			Event Player.particuleBarrierActivated = False;
		Else;
			Event Player.zaryaEnergy = Event Player.zaryaEnergy + Event Damage / 5;
			Event Player.particuleBarrierHealth = Event Player.particuleBarrierHealth - Event Damage;
		End;
		If(Event Player.zaryaEnergy > 100);
			Event Player.zaryaEnergy = 100;
		End;
	}
}

rule("¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤ Zarya Projected Barried (Get target + CD verification) ¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zarya;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 2)) == True;
		Event Player.projectedBarrierCD == Global.projectedBarrierCD;
	}

	actions
	{
		Event Player.projectedBarrierActivated = True;
		Stop Chasing Player Variable(Event Player, projectedBarrierCD);
		Event Player.projectedBarrierCD = 0;
		Event Player.projectedBarrierTarget = Player Closest To Reticle(Event Player, Team Of(Event Player));
		Player Closest To Reticle(Event Player, Team Of(Event Player)).projectedBarrierIsAffectedBy = True;
		Event Player.projectedBarrierTarget.projectedBarrierGenerator = Event Player;
		Event Player.projectedBarrierHealth = 200;
	}
}

rule("Zarya Projected Barrier Health Management")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.projectedBarrierIsAffectedBy == True;
	}

	actions
	{
		Add Health Pool To Player(Event Player, Shields, 200, False, True);
		Event Player.projectedBarrierHealthID = Last Created Health Pool;
		Create Effect(All Players(All Teams), Sphere, Color(White), Event Player, 1, Visible To Position and Radius);
		Event Player.projectedBarrierEffectID = Last Created Entity;
		Event Player.projectedBarrierLoopVar = Custom String("KILLABLE : NO");
		Wait(2, Ignore Condition);
		Remove Health Pool From Player(Event Player.projectedBarrierHealthID);
		Event Player.projectedBarrierGenerator.projectedBarrierActivated = False;
		Event Player.projectedBarrierGenerator.projectedBarrierHealth = 0;
		Event Player.projectedBarrierIsAffectedBy = False;
		Event Player.projectedBarrierLoopVar = Custom String("KILLABLE : YES");
		Wait(0.032, Ignore Condition);
		Event Player.projectedBarrierLoopVar = Custom String("KILLABLE : STAND-BY");
	}
}

rule("Zarya Projected Barrier (Death Immunity + Animation)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		If(Event Player.projectedBarrierGenerator.projectedBarrierHealth > 0);
			Set Status(Event Player, Null, Unkillable, 9999);
			Event Player.projectedBarrierEffectID = Last Created Entity;
		Else;
			If(Event Player.projectedBarrierLoopVar == Custom String("KILLABLE : YES"));
				Clear Status(Event Player, Unkillable);
				Event Player.projectedBarrierHealthID = False;
				Destroy Effect(Event Player.projectedBarrierEffectID);
			End;
		End;
		Wait(0.016, Ignore Condition);
		Loop;
	}
}

rule("Zarya Projected Barrier (CC immunity)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.projectedBarrierGenerator.projectedBarrierHealth > 0;
		(Has Status(Event Player, Burning) || Has Status(Event Player, Frozen) || Has Status(Event Player, Stunned)) == True;
	}

	actions
	{
		Clear Status(Event Player, Burning);
		Clear Status(Event Player, Frozen);
		Clear Status(Event Player, Stunned);
	}
}

rule("Zarya Projected Barrier (Damage absorption)")
{
	event
	{
		Player Took Damage;
		All;
		All;
	}

	conditions
	{
		Event Player.projectedBarrierGenerator.projectedBarrierHealth > 0;
	}

	actions
	{
		If(Event Damage > Event Player.projectedBarrierGenerator.projectedBarrierHealth);
			Event Player.projectedBarrierLoopVar = Custom String("KILLABLE : YES");
			Event Player.projectedBarrierGenerator.zaryaEnergy = Event Player.projectedBarrierGenerator.zaryaEnergy + Event Player.projectedBarrierGenerator.projectedBarrierHealth / 5;
			Heal(Event Player, Null, Event Damage - Event Player.projectedBarrierGenerator.projectedBarrierHealth);
			Event Player.projectedBarrierGenerator.projectedBarrierHealth = 0;
			Wait(0.032, Ignore Condition);
			Event Player.projectedBarrierGenerator.projectedBarrierActivated = False;
			Event Player.projectedBarrierLoopVar = Custom String("KILLABLE : STANDBY");
		Else;
			Event Player.projectedBarrierGenerator.zaryaEnergy = Event Player.projectedBarrierGenerator.zaryaEnergy + Event Damage / 5;
			Event Player.projectedBarrierGenerator.projectedBarrierHealth = Event Player.projectedBarrierGenerator.projectedBarrierHealth - Event Damage;
		End;
		If(Event Player.projectedBarrierGenerator.zaryaEnergy > 100);
			Event Player.projectedBarrierGenerator.zaryaEnergy = 100;
		End;
	}
}

rule("Zarya Projected Barrier (Cooldown)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zarya;
	}

	conditions
	{
		Event Player.projectedBarrierActivated == False;
	}

	actions
	{
		Chase Player Variable Over Time(Event Player, projectedBarrierCD, Global.projectedBarrierCD, Global.projectedBarrierCD,
			Destination and Duration);
	}
}

rule("Zarya Particule Barrier (Cooldown)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zarya;
	}

	conditions
	{
		Event Player.particuleBarrierActivated == False;
	}

	actions
	{
		Chase Player Variable Over Time(Event Player, particuleBarrierCD, Global.particuleBarrierCD, Global.particuleBarrierCD,
			Destination and Duration);
	}
}
