variables
{
	global:
		0: heroAvailableArray
		1: roadHogTaBreatherDuration
		2: tacticalVisorCharge
		3: bioticFieldRadiusEffect
		4: hudSpacebar
		5: hudCarriageReturn
		6: projectedBarrierCD
		7: particuleBarrierCD
		8: zaryaBarrierHealth
		9: zaryaEnergyUnit

	player:
		0: switchVerif
		1: orisaTempArmorPool
		2: orisaBoolFortifyActive
		3: orisaBarrierCD
		4: roadhogTaBreatherBoostBool
		5: roadhogTaBreatherBoostFor
		6: roadhogTaBreatherBoostVerif
		7: winstonJumpPackBool
		8: winstonJumpPackDamagedHeroes
		9: winstonForDamageJump
		10: zaryaEnergy
		11: particuleBarrierHealth
		12: particuleBarrierHealthID
		13: particuleBarrierAllyEffectID
		14: particuleBarrierEnnemyEffectID
		15: projectedBarrierTarget
		16: projectedBarrierHealth
		17: projectedBarrierHealthID
		18: projectedBarrierEnnemyEffectID
		19: projectedBarrierAllyEffectID
		20: projectedBarrierIsAffectedBy
		21: projectedBarrierGenerator
		22: zaryaEnergyHUD
		23: projectedBarrierLoopVar
		24: projectedBarrierActivated
		25: particuleBarrierActivated
		26: pharahGravityFall
		27: pharahDashInput
		28: soldierUltiActive
		29: soldierAbility2Active
		30: fieldBioticEffectZone
		31: fieldBioticCreatedEffect
		32: fieldBioticForHeal
		33: fieldBioticForEffect
		34: fieldBioticActive
}

rule("○ GLOBAL")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.roadHogTaBreatherDuration = 5;
		Global.projectedBarrierCD = 6;
		Global.particuleBarrierCD = 8;
		Global.tacticalVisorCharge = 2310;
		Global.bioticFieldRadiusEffect = 7.500;
		Global.zaryaBarrierHealth = 200;
		Global.zaryaEnergyUnit = 5;
		Global.hudCarriageReturn = Custom String(" \r\n \r\n\r\n  \r\n \r\n \r\n \r\n ");
		Global.hudSpacebar = Custom String(
			"                                                                                                      ");
		disabled Global.hudCarriageReturn = Custom String(" ");
		disabled Global.hudSpacebar = Custom String(" ");
	}
}

disabled rule("■■■■■■  SWITCH ■■■■■■")
{
	event
	{
		Ongoing - Global;
	}
}

rule("○ SWITCHING")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		Event Player.switchVerif = Hero Of(Event Player);
		Wait(0.016, Ignore Condition);
		Skip If(Hero Of(Event Player) == Event Player.switchVerif, 8);
		Remove All Health Pools From Player(Event Player);
		Set Projectile Speed(Event Player, 100);
		Set Healing Dealt(Event Player, 100);
		Set Max Health(Event Player, 100);
		Set Melee Enabled(Event Player, True);
		Allow Button(Event Player, Button(Ability 1));
		Allow Button(Event Player, Button(Ability 2));
		Allow Button(Event Player, Button(Secondary Fire));
		If(Hero Of(Event Player) == Hero(Zarya));
			Set Melee Enabled(Event Player, False);
		Else;
			Set Melee Enabled(Event Player, True);
			Destroy HUD Text(Event Player.zaryaEnergyHUD);
		End;
		Loop;
	}
}

disabled rule("■■■■■■ HEROES  ■■■■■■")
{
	event
	{
		Ongoing - Global;
	}
}

rule("○ HERO AVAIBILITY (Remove Echo)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		Global.heroAvailableArray = All Heroes;
		Global.heroAvailableArray = Remove From Array(Global.heroAvailableArray, Hero(Echo));
		Set Player Allowed Heroes(Event Player, Global.heroAvailableArray);
	}
}

disabled rule("■■■■■■ D.VA ■■■■■■")
{
	event
	{
		Ongoing - Global;
	}
}

rule("○ D.VA Stats (Spawn, destruction, ultimate)")
{
	event
	{
		Ongoing - Each Player;
		All;
		D.Va;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Wait(0.100, Ignore Condition);
		Set Max Health(Event Player, 1);
		Remove All Health Pools From Player(Event Player);
		If(Max Health(Event Player) > 5);
			Set Projectile Speed(Event Player, 150);
			Add Health Pool To Player(Event Player, Armor, 294, True, True);
		Else;
			Add Health Pool To Player(Event Player, Health, 148.500, True, True);
			Set Projectile Speed(Event Player, 100);
		End;
	}
}

rule("└ D.Va (Ultimate)")
{
	event
	{
		Ongoing - Each Player;
		All;
		D.Va;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Remove All Health Pools From Player(Event Player);
		Set Max Health(Event Player, 100);
		Wait(0.016, Ignore Condition);
		If(Max Health(Event Player) <= 150);
			Set Max Health(Event Player, 1);
			Add Health Pool To Player(Event Player, Health, 148.500, True, True);
			Set Projectile Speed(Event Player, 100);
		Else;
			Set Max Health(Event Player, 1);
			Add Health Pool To Player(Event Player, Armor, 294, True, True);
			Set Projectile Speed(Event Player, 150);
		End;
	}
}

rule("└ D.Va (Meka destruction)")
{
	event
	{
		Ongoing - Each Player;
		All;
		D.Va;
	}

	conditions
	{
		Health(Event Player) < 0.100;
	}

	actions
	{
		Remove All Health Pools From Player(Event Player);
		If(Max Health(Event Player) > 150);
			Remove All Health Pools From Player(Event Player);
			Add Health Pool To Player(Event Player, Health, 148.500, True, True);
			Set Projectile Speed(Event Player, 100);
		Else;
			Remove All Health Pools From Player(Event Player);
			Add Health Pool To Player(Event Player, Armor, 294, True, True);
			Set Projectile Speed(Event Player, 150);
		End;
	}
}

rule("○ D.Va Defense Matrix (0.5s CD)")
{
	event
	{
		Ongoing - Each Player;
		All;
		D.Va;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(D.Va);
		Is Firing Secondary(Event Player) == True;
	}

	actions
	{
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
		Wait(0.500, Ignore Condition);
		Set Ability Cooldown(Event Player, Button(Secondary Fire), 0);
	}
}

rule("○ D.Va (no movement penalty (Shooting))")
{
	event
	{
		Ongoing - Each Player;
		All;
		D.Va;
	}

	conditions
	{
		Is Firing Primary(Event Player) == True;
		!Is Using Ability 1(Event Player) == True;
		Max Health(Event Player) > 150;
	}

	actions
	{
		Set Move Speed(Event Player, 142.857);
	}
}

disabled rule("¤ D.Va (1/4 movement penalty (Shooting))")
{
	event
	{
		Ongoing - Each Player;
		All;
		D.Va;
	}

	conditions
	{
		Is Firing Primary(Event Player) == True;
		!Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		disabled Set Move Speed(Event Player, 125);
	}
}

rule("└D.Va (movement penalty (stop shooting))")
{
	event
	{
		Ongoing - Each Player;
		All;
		D.Va;
	}

	conditions
	{
		!Is Firing Primary(Event Player) == True;
		!Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Set Move Speed(Event Player, 100);
	}
}

rule("○ D.Va Booster")
{
	event
	{
		Ongoing - Each Player;
		All;
		D.Va;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(D.Va);
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		If(Is Using Ability 1(Event Player) == True);
			Set Move Speed(Event Player, 150);
		Else;
			Set Move Speed(Event Player, 100);
		End;
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("■■■■■■ ORISA ■■■■■■")
{
	event
	{
		Ongoing - Global;
	}
}

rule("○ Orisa max health")
{
	event
	{
		Ongoing - Each Player;
		All;
		Orisa;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Wait(0.100, Ignore Condition);
		Set Max Health(Event Player, 66.667);
		Event Player.orisaBarrierCD = 18;
	}
}

rule("○ Orisa fortify buff (+25% speed, +100 armor)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Orisa;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Event Player.orisaBoolFortifyActive = True;
		Add Health Pool To Player(Event Player, Armor, 100, False, True);
		Event Player.orisaTempArmorPool = Last Created Health Pool;
		Set Move Speed(Event Player, 125);
		Wait(4, Ignore Condition);
		Set Move Speed(Event Player, 100);
		Remove Health Pool From Player(Event Player.orisaTempArmorPool);
		Event Player.orisaBoolFortifyActive = False;
	}
}

rule("└Orisa Fortify Buff (Shooting = Ignore speed penalty)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Orisa;
	}

	conditions
	{
		Event Player.orisaBoolFortifyActive == True;
	}

	actions
	{
		If(Is Firing Primary(Event Player) == True);
			Set Move Speed(Event Player, 178.572);
		Else;
			Set Move Speed(Event Player, 125);
		End;
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("○ Orisa Buff Barrier (Avaibility)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Orisa;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Orisa);
	}

	actions
	{
		If(Event Player.orisaBarrierCD < 9);
			Set Ability Cooldown(Event Player, Button(Ability 2), 9 - Event Player.orisaBarrierCD);
		Else;
			Set Ability Cooldown(Event Player, Button(Ability 2), 0);
		End;
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("└Orisa Barrier CD decrement")
{
	event
	{
		Ongoing - Each Player;
		All;
		Orisa;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		Set Ability 2 Enabled(Event Player, False);
		Wait(1, Ignore Condition);
		Event Player.orisaBarrierCD = Event Player.orisaBarrierCD - 9;
		Set Ability 2 Enabled(Event Player, True);
	}
}

rule("└Orisa Barrier CD increment")
{
	event
	{
		Ongoing - Each Player;
		All;
		Orisa;
	}

	actions
	{
		Chase Player Variable At Rate(Event Player, orisaBarrierCD, 18, 1, Destination and Rate);
	}
}

disabled rule("REINHARDT")
{
	event
	{
		Ongoing - Global;
	}
}

rule("○ Reinhardt (75hp damage/ swing)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Reinhardt;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Reinhardt);
	}

	actions
	{
		If(Is Firing Primary(Event Player) == True);
			Set Damage Dealt(Event Player, 88.235);
		Else;
			Set Damage Dealt(Event Player, 100);
		End;
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("■■■■■■ ROADHOG ■■■■■■")
{
	event
	{
		Ongoing - Global;
	}
}

rule("○ Roadhog (400 hp. Tank a Breather 200HP)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Roadhog;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Wait(0.100, Ignore Condition);
		Set Healing Dealt(Event Player, 66.667);
		Set Max Health(Event Player, 66.667);
	}
}

rule("○ Roadhog (CD Take a breather)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Roadhog;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		Wait(2, Ignore Condition);
		Set Ability Cooldown(Event Player, Button(Ability 2), 10);
	}
}

rule("└Roadhog Take Deeply a Booster(Activate second take a breather)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Roadhog;
	}

	conditions
	{
		"Roadhog uses a second breather. He became stronger during a short period of time. He can't be stun, sleep, freeze or knockdown or rooted. And he healed 200HP in 1 second again."
		Is Using Ability 2(Event Player) == True;
		Is Button Held(Event Player, Button(Ability 2)) == True;
	}

	actions
	{
		Wait(1.500, Abort When False);
		Set Ability 2 Enabled(Event Player, False);
		Play Effect(All Players(All Teams), Good Explosion, Color(Aqua), Event Player, 100);
		Set Status(Event Player, Null, Rooted, 1);
		Set Primary Fire Enabled(Event Player, False);
		Set Secondary Fire Enabled(Event Player, False);
		Set Ability 1 Enabled(Event Player, False);
		Set Ability 2 Enabled(Event Player, False);
		Set Ultimate Ability Enabled(Event Player, False);
		Wait(1, Ignore Condition);
		Event Player.roadhogTaBreatherBoostBool = True;
		Event Player.roadhogTaBreatherBoostVerif = 0;
		Set Primary Fire Enabled(Event Player, True);
		Set Secondary Fire Enabled(Event Player, True);
		Set Ability 1 Enabled(Event Player, True);
		Set Ultimate Ability Enabled(Event Player, True);
	}
}

rule("└Roadhog Take a Breather Buff (Effects)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Roadhog;
	}

	conditions
	{
		Event Player.roadhogTaBreatherBoostBool == True;
	}

	actions
	{
		Start Heal Over Time(Event Player, Event Player, 1, 200);
		For Player Variable(Event Player, roadhogTaBreatherBoostFor, 0, Global.roadHogTaBreatherDuration, 1);
			Play Effect(All Players(All Teams), Good Explosion, Color(Red), Event Player, 10);
			Wait(1, Ignore Condition);
		End;
		Event Player.roadhogTaBreatherBoostBool = False;
		Set Ability Cooldown(Event Player, Button(Ability 2), 10);
		Set Ability 2 Enabled(Event Player, True);
	}
}

rule("└Roadhog Stun cleanse")
{
	event
	{
		Ongoing - Each Player;
		All;
		Roadhog;
	}

	conditions
	{
		Event Player.roadhogTaBreatherBoostBool == True;
		(Has Status(Event Player, Asleep) || Has Status(Event Player, Knocked Down) || Has Status(Event Player, Frozen) || Has Status(
			Event Player, Rooted) || Has Status(Event Player, Stunned)) == True;
	}

	actions
	{
		Clear Status(Event Player, Asleep);
		Clear Status(Event Player, Frozen);
		Clear Status(Event Player, Rooted);
		Clear Status(Event Player, Stunned);
		Clear Status(Event Player, Knocked Down);
	}
}

disabled rule("¤ RoadCrush Take a breather Buff (Emote Version use)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Roadhog;
	}

	conditions
	{
		Is Communicating Any Emote(Event Player) == True;
	}

	actions
	{
		Set Ability Cooldown(Event Player, Button(Ability 2), 15);
		Wait(0.500, Abort When False);
		Start Heal Over Time(Event Player, Event Player, 1, 200);
		Set Damage Received(Event Player, 50);
		Wait(4.500, Abort When False);
		Set Damage Received(Event Player, 100);
		For Player Variable(Event Player, roadhogTaBreatherBoostFor, 0, 5, 0.050);
			Clear Status(Event Player, Asleep);
			Clear Status(Event Player, Frozen);
			Clear Status(Event Player, Rooted);
			Clear Status(Event Player, Stunned);
			Clear Status(Event Player, Knocked Down);
			Play Effect(All Players(All Teams), Good Explosion, Color(Red), Event Player, 2);
			Wait(0.050, Ignore Condition);
		End;
	}
}

disabled rule("└Do Can Crusher (Take a Breather buff)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Roadhog;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
	}

	actions
	{
		Communicate(Event Player, Emote Right);
	}
}

disabled rule("■■■■■■ WINSON ■■■■■■")
{
	event
	{
		Ongoing - Global;
	}
}

rule("○ Winston (Health/armor + shield)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Winston;
	}

	actions
	{
		Set Max Health(Event Player, 71.429);
		Reset Player Hero Availability(Event Player);
		Add Health Pool To Player(Event Player, Armor, 28.571, True, True);
		Add Health Pool To Player(Event Player, Health, 14.285, True, True);
	}
}

rule("○ Winston (Jump pack landing +25 damage)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Winston;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Wait(0.100, Abort When False);
		Event Player.winstonJumpPackBool = True;
	}
}

rule("└Winston (Landing)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Winston;
	}

	conditions
	{
		!Is In Air(Event Player) == True;
		Event Player.winstonJumpPackBool == True;
	}

	actions
	{
		Event Player.winstonJumpPackDamagedHeroes = Players Within Radius(Event Player, 5, Opposite Team Of(Team Of(Event Player)),
			Surfaces And All Barriers);
		For Player Variable(Event Player, winstonForDamageJump, 0, Count Of(Event Player.winstonJumpPackDamagedHeroes), 1);
			Damage(Event Player.winstonJumpPackDamagedHeroes[Event Player.winstonForDamageJump], Event Player, 25 * (1 - Distance Between(
				Event Player, Event Player.winstonJumpPackDamagedHeroes[Event Player.winstonForDamageJump]) / 5));
		End;
		Event Player.winstonJumpPackBool = False;
	}
}

rule("└Winston (Jump 5s CD, verif ult)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Winston;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == False;
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Set Ability Cooldown(Event Player, Button(Ability 1), 5);
	}
}

disabled rule("■■■■■■ ZARYA ■■■■■■")
{
	event
	{
		Ongoing - Global;
	}
}

rule("○ Zarya Spawn")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zarya;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Set Max Health(Event Player, 50);
		Add Health Pool To Player(Event Player, Health, 100, True, True);
		Event Player.zaryaEnergy = 0;
		Disallow Button(Event Player, Button(Ability 1));
		Disallow Button(Event Player, Button(Ability 2));
		Wait(0.016, Ignore Condition);
		Set Ability Cooldown(Event Player, Button(Ability 1), 0);
		Set Ability Cooldown(Event Player, Button(Ability 2), 0);
	}
}

rule("○ Zarya (Energy damage boost : classic version)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zarya;
	}

	actions
	{
		If(Is Button Held(Event Player, Button(Melee)) == True);
			Set Damage Dealt(Event Player, 100);
			Set Melee Enabled(Event Player, True);
			Press Button(Event Player, Button(Melee));
			Wait(0.250, Ignore Condition);
			Set Melee Enabled(Event Player, False);
		End;
		If(Is Button Held(Event Player, Button(Primary Fire)) == True);
			Set Damage Dealt(Event Player, 100 + 78.947 * (Event Player.zaryaEnergy / 100));
		End;
		End;
		Set Damage Dealt(Event Player, 100 + Event Player.zaryaEnergy);
		Wait(0.016, Ignore Condition);
		Loop;
	}
}

rule("└Zarya (Energy loss : -1.6% per second)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zarya;
	}

	actions
	{
		If(Event Player.zaryaEnergy > 0);
			Wait(0.609, Ignore Condition);
			Event Player.zaryaEnergy = Event Player.zaryaEnergy - 1;
		End;
		Wait(0.016, Ignore Condition);
		Loop;
	}
}

disabled rule("○ Zarya (Energy damage boost)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zarya;
	}

	actions
	{
		If(Is Button Held(Event Player, Button(Melee)) == True);
			Set Damage Dealt(Event Player, 100);
			Set Melee Enabled(Event Player, True);
			Press Button(Event Player, Button(Melee));
			Wait(0.250, Ignore Condition);
			Set Melee Enabled(Event Player, False);
		End;
		Set Damage Dealt(Event Player, 100 + Event Player.zaryaEnergy);
		Wait(0.016, Ignore Condition);
		Loop;
	}
}

disabled rule("└Zarya (Energy loss : -1% per ammo shot)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zarya;
	}

	conditions
	{
		(Is Firing Primary(Event Player) == True || Is Firing Secondary(Event Player) == True) == True;
	}

	actions
	{
		If(Event Player.zaryaEnergy > 0 && Is Firing Primary(Event Player) == True);
			Event Player.zaryaEnergy = Event Player.zaryaEnergy - 0.960;
			If(Event Player.zaryaEnergy < 0);
				Event Player.zaryaEnergy = 0;
			End;
			Wait(0.048, Ignore Condition);
		End;
		If(Event Player.zaryaEnergy > 0 && Is Firing Secondary(Event Player) == True);
			Event Player.zaryaEnergy = Event Player.zaryaEnergy - 25;
			If(Event Player.zaryaEnergy < 0);
				Event Player.zaryaEnergy = 0;
			End;
			Wait(1, Ignore Condition);
		End;
		Loop If Condition Is True;
	}
}

rule("○ Zarya HUD")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zarya;
	}

	actions
	{
		Create HUD Text(Event Player, Null, Null, String("{0} {1}", String("{0} {1}", Global.hudSpacebar, Global.hudSpacebar),
			Event Player.zaryaEnergy), Left, 0, Color(Aqua), Color(White), Color(Rose), Visible To and String, Default Visibility);
		Event Player.zaryaEnergyHUD = Last Text ID;
		Create HUD Text(All Players(All Teams), Null, Null, String("{0} {1} {2}", Global.hudCarriageReturn, Global.hudCarriageReturn,
			Global.hudCarriageReturn), Left, 0, Color(Aqua), Color(White), Color(White), Visible To and String, Default Visibility);
	}
}

rule("○ Zarya Particule Barrier Activation")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zarya;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 1)) == True;
		Ability Cooldown(Event Player, Button(Ability 1)) == 0;
	}

	actions
	{
		Set Ability 1 Enabled(Event Player, False);
		Event Player.particuleBarrierActivated = True;
		Add Health Pool To Player(Event Player, Shields, Global.zaryaBarrierHealth, False, True);
		Event Player.particuleBarrierHealthID = Last Created Health Pool;
		Event Player.particuleBarrierHealth = Global.zaryaBarrierHealth;
		Create Effect(All Players(Opposite Team Of(Team Of(Event Player))), Sphere, Color(Red), Event Player, 1,
			Visible To Position and Radius);
		Event Player.projectedBarrierEnnemyEffectID = Last Created Entity;
		Create Effect(All Players(Team Of(Event Player)), Sphere, Color(Purple), Event Player, 1, Visible To Position and Radius);
		Event Player.particuleBarrierAllyEffectID = Last Created Entity;
		Wait(2, Ignore Condition);
		Event Player.particuleBarrierActivated = False;
		Remove Health Pool From Player(Event Player.particuleBarrierHealthID);
		Event Player.particuleBarrierHealth = 0;
	}
}

rule("└Zarya Particule Barrier (Death Immunity + Animation)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zarya;
	}

	actions
	{
		If(Event Player.particuleBarrierHealth > 0);
			Set Status(Event Player, Null, Unkillable, 9999);
			Event Player.particuleBarrierEnnemyEffectID = Last Created Entity;
		Else;
			Clear Status(Event Player, Unkillable);
			Event Player.particuleBarrierHealthID = False;
			Destroy Effect(Event Player.particuleBarrierEnnemyEffectID);
			Destroy Effect(Event Player.particuleBarrierAllyEffectID);
		End;
		Wait(0.016, Ignore Condition);
		Loop;
	}
}

rule("└Zarya Particule Barrier (CC immunity)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.particuleBarrierHealth > 0;
		(Has Status(Event Player, Burning) || Has Status(Event Player, Frozen) || Has Status(Event Player, Stunned)) == True;
	}

	actions
	{
		Clear Status(Event Player, Burning);
		Clear Status(Event Player, Frozen);
		Clear Status(Event Player, Stunned);
	}
}

rule("└Zarya Particule Barrier (Damage absorption)")
{
	event
	{
		Player Took Damage;
		All;
		All;
	}

	conditions
	{
		Event Player.particuleBarrierHealth > 0;
	}

	actions
	{
		If(Event Damage > Event Player.particuleBarrierHealth);
			Event Player.zaryaEnergy = Event Player.zaryaEnergy + Event Player.particuleBarrierHealth / Global.zaryaEnergyUnit;
			Heal(Event Player, Null, Event Damage - Event Player.particuleBarrierHealth);
			Event Player.particuleBarrierHealth = 0;
			Event Player.particuleBarrierActivated = False;
		Else;
			Event Player.zaryaEnergy = Event Player.zaryaEnergy + Event Damage / Global.zaryaEnergyUnit;
			Event Player.particuleBarrierHealth = Event Player.particuleBarrierHealth - Event Damage;
		End;
		If(Event Player.zaryaEnergy > 100);
			Event Player.zaryaEnergy = 100;
		End;
	}
}

rule("└Zarya Particule Barrier (Cooldown)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zarya;
	}

	conditions
	{
		Event Player.particuleBarrierActivated == False;
	}

	actions
	{
		Set Ability 1 Enabled(Event Player, True);
		Set Ability Cooldown(Event Player, Button(Ability 1), Global.particuleBarrierCD);
	}
}

rule("○ Zarya Projected Barried (Get target + CD verification)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zarya;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 2)) == True;
		Ability Cooldown(Event Player, Button(Ability 2)) == 0;
	}

	actions
	{
		Set Ability 2 Enabled(Event Player, False);
		Event Player.projectedBarrierActivated = True;
		Event Player.projectedBarrierTarget = Player Closest To Reticle(Event Player, Team Of(Event Player));
		Player Closest To Reticle(Event Player, Team Of(Event Player)).projectedBarrierIsAffectedBy = True;
		Event Player.projectedBarrierTarget.projectedBarrierGenerator = Event Player;
		Event Player.projectedBarrierHealth = Global.zaryaBarrierHealth;
	}
}

rule("└Zarya Projected Barrier Health Management")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.projectedBarrierIsAffectedBy == True;
	}

	actions
	{
		Add Health Pool To Player(Event Player, Shields, Global.zaryaBarrierHealth, False, True);
		Event Player.projectedBarrierHealthID = Last Created Health Pool;
		Create Effect(All Players(Opposite Team Of(Team Of(Event Player))), Sphere, Color(Red), Event Player, 1,
			Visible To Position and Radius);
		Event Player.projectedBarrierAllyEffectID = Last Created Entity;
		Create Effect(All Players(Team Of(Event Player)), Sphere, Color(Purple), Event Player, 1, Visible To Position and Radius);
		Event Player.projectedBarrierAllyEffectID = Last Created Entity;
		Event Player.projectedBarrierLoopVar = Custom String("KILLABLE : NO");
		Wait(2, Ignore Condition);
		Remove Health Pool From Player(Event Player.projectedBarrierHealthID);
		Event Player.projectedBarrierGenerator.projectedBarrierActivated = False;
		Event Player.projectedBarrierGenerator.projectedBarrierHealth = 0;
		Event Player.projectedBarrierIsAffectedBy = False;
		Event Player.projectedBarrierLoopVar = Custom String("KILLABLE : YES");
		Wait(0.032, Ignore Condition);
		Event Player.projectedBarrierLoopVar = Custom String("KILLABLE : STAND-BY");
	}
}

rule("└Zarya Projected Barrier (Death Immunity + Animation)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		If(Event Player.projectedBarrierGenerator.projectedBarrierHealth > 0);
			Set Status(Event Player, Null, Unkillable, 9999);
			Event Player.projectedBarrierEnnemyEffectID = Last Created Entity;
		Else;
			If(Event Player.projectedBarrierLoopVar == Custom String("KILLABLE : YES"));
				Clear Status(Event Player, Unkillable);
				Event Player.projectedBarrierHealthID = False;
				Destroy Effect(Event Player.projectedBarrierEnnemyEffectID);
				Destroy Effect(Event Player.projectedBarrierAllyEffectID);
			End;
		End;
		Wait(0.016, Ignore Condition);
		Loop;
	}
}

rule("└Zarya Projected Barrier (CC immunity)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.projectedBarrierGenerator.projectedBarrierHealth > 0;
		(Has Status(Event Player, Burning) || Has Status(Event Player, Frozen) || Has Status(Event Player, Stunned)) == True;
	}

	actions
	{
		Clear Status(Event Player, Burning);
		Clear Status(Event Player, Frozen);
		Clear Status(Event Player, Stunned);
	}
}

rule("└Zarya Projected Barrier (Damage absorption)")
{
	event
	{
		Player Took Damage;
		All;
		All;
	}

	conditions
	{
		Event Player.projectedBarrierGenerator.projectedBarrierHealth > 0;
	}

	actions
	{
		If(Event Damage > Event Player.projectedBarrierGenerator.projectedBarrierHealth);
			Event Player.projectedBarrierLoopVar = Custom String("KILLABLE : YES");
			Event Player.projectedBarrierGenerator.zaryaEnergy = Event Player.projectedBarrierGenerator.zaryaEnergy + Event Player.projectedBarrierGenerator.projectedBarrierHealth / Global.zaryaEnergyUnit;
			Heal(Event Player, Null, Event Damage - Event Player.projectedBarrierGenerator.projectedBarrierHealth);
			Event Player.projectedBarrierGenerator.projectedBarrierHealth = 0;
			Wait(0.032, Ignore Condition);
			Event Player.projectedBarrierGenerator.projectedBarrierActivated = False;
			Event Player.projectedBarrierLoopVar = Custom String("KILLABLE : STANDBY");
		Else;
			Event Player.projectedBarrierGenerator.zaryaEnergy = Event Player.projectedBarrierGenerator.zaryaEnergy + Event Damage / 5;
			Event Player.projectedBarrierGenerator.projectedBarrierHealth = Event Player.projectedBarrierGenerator.projectedBarrierHealth - Event Damage;
		End;
		If(Event Player.projectedBarrierGenerator.zaryaEnergy > 100);
			Event Player.projectedBarrierGenerator.zaryaEnergy = 100;
		End;
	}
}

rule("└Zarya Projected Barrier (Cooldown)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zarya;
	}

	conditions
	{
		Event Player.projectedBarrierActivated == False;
	}

	actions
	{
		Set Ability 2 Enabled(Event Player, True);
		Set Ability Cooldown(Event Player, Button(Ability 2), Global.projectedBarrierCD);
	}
}

disabled rule("■■■■■■ MCCREE ■■■■■■")
{
	event
	{
		Ongoing - Global;
	}
}

rule("○ McCree (200HP)")
{
	event
	{
		Ongoing - Each Player;
		All;
		McCree;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Set Max Health(Event Player, 88.889);
	}
}

disabled rule("■■■■■■ PHARAH ■■■■■■")
{
	event
	{
		Ongoing - Global;
	}
}

rule("○ Pharah (Crouch to fall quicker)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Pharah;
	}

	actions
	{
		If(Is In Air(Event Player) && Is Button Held(Event Player, Button(Crouch)));
			Event Player.pharahGravityFall = 500;
			disabled Event Player.pharahGravityFall = Event Player.pharahGravityFall + 25;
		Else;
			Event Player.pharahGravityFall = 100;
		End;
		Set Gravity(Event Player, Event Player.pharahGravityFall);
		Wait(0.016, Ignore Condition);
		Loop;
	}
}

disabled rule("○ Dash in air")
{
	event
	{
		Ongoing - Each Player;
		All;
		Pharah;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Jump)) == True;
	}

	actions
	{
		Event Player.pharahDashInput = Event Player.pharahDashInput + 1;
		If(Event Player.pharahDashInput >= 2);
			If(Ability Resource(Event Player, Button(Jump)) >= 25);
				Set Move Speed(Event Player, 300);
				Wait(0.050, Ignore Condition);
				Set Move Speed(Event Player, 100);
				Set Ability Resource(Event Player, Button(Jump), Ability Resource(Event Player, Button(Jump)) - 25);
			End;
		End;
		Wait(0.250, Restart When True);
		Event Player.pharahDashInput = 0;
		Set Move Speed(Event Player, 100);
	}
}

disabled rule("■■■■■■ SOLDIER : 76 ■■■■■■")
{
	event
	{
		Ongoing - Global;
	}
}

rule("○Soldier 76 (Start)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Soldier: 76;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Set Healing Dealt(Event Player, 0);
		Disallow Button(Event Player, Button(Ultimate));
	}
}

rule("○Biotic Booster Activation")
{
	event
	{
		Ongoing - Each Player;
		All;
		Soldier: 76;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		Event Player.soldierAbility2Active = True;
		Heal(Event Player, Event Player, 25);
		Start Heal Over Time(Event Player, Event Player, 5, 20);
		Set Ability Cooldown(Event Player, Button(Ability 2), 15);
		Wait(5, Ignore Condition);
		Set Move Speed(Event Player, 100);
		Event Player.soldierAbility2Active = False;
	}
}

rule("└Biotic Booster Healing Ultimate Charge")
{
	event
	{
		Player Received Healing;
		All;
		Soldier: 76;
	}

	conditions
	{
		Healer == Event Player;
	}

	actions
	{
		If(Event Healing > 5);
			Set Ultimate Charge(Event Player, Ultimate Charge Percent(Event Player) + Event Healing / Global.tacticalVisorCharge * 100);
		Else;
			Set Ultimate Charge(Event Player, Ultimate Charge Percent(Event Player) + Event Healing / Global.tacticalVisorCharge * 500);
		End;
	}
}

rule("○ New tactical visor (Ultimate Activation)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Soldier: 76;
	}

	conditions
	{
		Ultimate Charge Percent(Event Player) == 100;
		Is Button Held(Event Player, Button(Ultimate)) == True;
	}

	actions
	{
		Event Player.soldierUltiActive = True;
		Heal(Event Player, Event Player, 50);
		Start Heal Over Time(Event Player, Event Player, 6, 25);
		Wait(6, Ignore Condition);
		Event Player.soldierUltiActive = False;
	}
}

rule("└Ultimate charge remover")
{
	event
	{
		Ongoing - Each Player;
		All;
		Soldier: 76;
	}

	actions
	{
		If(Event Player.soldierUltiActive == True);
			Set Ultimate Charge(Event Player, 0);
		End;
		Wait(0.016, Ignore Condition);
		Loop;
	}
}

rule("└Soldier Ultimate Sound")
{
	event
	{
		Ongoing - Each Player;
		All;
		Soldier: 76;
	}

	actions
	{
		If(Event Player.soldierUltiActive == True);
			Play Effect(All Players(All Teams), Buff Explosion Sound, Color(White), Event Player, 10);
			Wait(1, Ignore Condition);
		End;
		Wait(0.016, Ignore Condition);
		Loop;
	}
}

rule("○ Sprint (Ultimated)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Soldier: 76;
	}

	actions
	{
		If(Event Player.soldierUltiActive == True);
			If(Event Player.soldierAbility2Active == True);
				Set Move Speed(Event Player, 200);
			Else;
				Set Move Speed(Event Player, 150);
			End;
		Else;
			If(Event Player.soldierAbility2Active == True);
				Set Move Speed(Event Player, 150);
			Else;
				Set Move Speed(Event Player, 100);
			End;
		End;
		Wait(0.016, Ignore Condition);
		Loop;
	}
}

disabled rule("■■■■■■ ANA ■■■■■■")
{
	event
	{
		Ongoing - Global;
	}
}

rule("○ Ana (Biotic grenade nerf)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Ana;
	}

	actions
	{
		If(Is Button Held(Event Player, Button(Ability 2)) == True && Ability Cooldown(Event Player, Button(Ability 2)) == 0);
			Set Healing Dealt(Event Player, 60);
			Allow Button(Event Player, Button(Ability 2));
			Press Button(Event Player, Button(Ability 2));
			Wait(0.100, Ignore Condition);
			Disallow Button(Event Player, Button(Ability 2));
		End;
		Disallow Button(Event Player, Button(Ability 2));
		Set Healing Dealt(Event Player, 100);
		Wait(0.016, Ignore Condition);
		Loop;
	}
}

disabled rule("■■■■■■ BAPTISTE ■■■■■■")
{
	event
	{
		Ongoing - Global;
	}
}

rule("○ BAPTISTE : USING BIOTIC FIELD")
{
	event
	{
		Ongoing - Each Player;
		All;
		Baptiste;
	}

	actions
	{
		If(Is Button Held(Event Player, Button(Ability 1)) == True && Ability Cooldown(Event Player, Button(Ability 1)) == 0);
			Allow Button(Event Player, Button(Ability 1));
			Press Button(Event Player, Button(Ability 1));
			Event Player.fieldBioticActive = True;
			Disallow Button(Event Player, Button(Ability 1));
			Event Player.fieldBioticEffectZone = Array(X Component Of(Position Of(Event Player)), Y Component Of(Position Of(Event Player)),
				Z Component Of(Position Of(Event Player)));
			Create Effect(All Players(All Teams), Ring, Color(Yellow), Vector(Event Player.fieldBioticEffectZone[0],
				Event Player.fieldBioticEffectZone[1], Event Player.fieldBioticEffectZone[2]), Global.bioticFieldRadiusEffect,
				Visible To Position and Radius);
			Event Player.fieldBioticCreatedEffect = Last Created Entity;
			For Player Variable(Event Player, fieldBioticForHeal, 0, 5, 0.250);
				Wait(0.250, Ignore Condition);
				Start Heal Over Time(Players Within Radius(Vector(Event Player.fieldBioticEffectZone[0], Event Player.fieldBioticEffectZone[1],
					Event Player.fieldBioticEffectZone[2]), Global.bioticFieldRadiusEffect, Team Of(Event Player), Surfaces And Enemy Barriers),
					Event Player, 0.250, 50);
			End;
			Destroy Effect(Event Player.fieldBioticCreatedEffect);
			Event Player.fieldBioticActive = False;
		End;
		Disallow Button(Event Player, Button(Ability 1));
		Set Healing Dealt(Event Player, 100);
		Wait(0.016, Ignore Condition);
		Loop;
	}
}

rule("└BAPTISTE (Biotic Field : Ring effect)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Baptiste;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 1)) == True;
		Event Player.fieldBioticActive == True;
	}

	actions
	{
		Event Player.fieldBioticEffectZone = Array(X Component Of(Position Of(Event Player)), Y Component Of(Position Of(Event Player)),
			Z Component Of(Position Of(Event Player)));
		For Player Variable(Event Player, fieldBioticForEffect, 0, 5, 1);
			Play Effect(All Players(All Teams), Ring Explosion, Color(Yellow), Vector(Event Player.fieldBioticEffectZone[0],
				Event Player.fieldBioticEffectZone[1], Event Player.fieldBioticEffectZone[2]), Global.bioticFieldRadiusEffect * 2);
			Wait(1, Ignore Condition);
		End;
	}
}

rule("○ BAPTISTE : Secondary fire")
{
	event
	{
		Ongoing - Each Player;
		All;
		Baptiste;
	}

	actions
	{
		If(Is Button Held(Event Player, Button(Secondary Fire)) == True);
			Set Healing Dealt(Event Player, 100);
			Allow Button(Event Player, Button(Secondary Fire));
			Press Button(Event Player, Button(Secondary Fire));
			Disallow Button(Event Player, Button(Secondary Fire));
			Set Healing Dealt(Event Player, 0);
			Wait(0.900, Ignore Condition);
		End;
		Disallow Button(Event Player, Button(Secondary Fire));
		Set Healing Dealt(Event Player, 0);
		Wait(0.016, Ignore Condition);
		Loop;
	}
}